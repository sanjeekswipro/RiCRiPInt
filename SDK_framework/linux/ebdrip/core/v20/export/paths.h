/** \file
 * \ingroup ps
 *
 * $HopeName: SWv20!export:paths.h(EBDSDK_P.1) $
 * $Id: export:paths.h,v 1.18.2.1.1.1 2013/12/19 11:25:19 anon Exp $
 *
 * Copyright (C) 2001-2010 Global Graphics Software Ltd. All rights reserved.
 * Global Graphics Software Ltd. Confidential Information.
 *
 * \brief
 * Path structure definitions.
 */

#ifndef __PATHS_H__
#define __PATHS_H__

/** \defgroup paths Graphics Path construction and manipulation
    \ingroup gstate */
/** \{ */

#include "coretypes.h" /* Temporary, until all RIP files include core.h first */
#include "graphict.h" /* Typedefs for structs declared here */
/* Do NOT include any other headers, or make this file depend on any other
   headers */

/*---------------------------------------------------------------------------*/
/* Path structure definitions */

/* The enumeration for linelist and pathlist allocation. */
enum {
  PATHTYPE_FREED = 100, /* Do not start at 0/1, to catch static allocations */
  PATHTYPE_DYNMALLOC,   /* Sllooowwww alloc */
  PATHTYPE_STATIC,      /* Static allocation */
  PATHTYPE_STACK,       /* Allocated on stack */
  PATHTYPE_STRUCT       /* Allocated as part of struct */
} ;

/* Linelist element types for paths and userpaths. These are only useful if
   you know the path structure, which is why they are here and not in
   graphict.h. See p168 of PSLRM2 for details on how the elements are
   numbered. */
enum { /* NOTE: When changing, update SWcore!testsrc:swaddin:swaddin.cpp. */
       UPATH_SETBBOX   = 0,
       UPATH_MOVETO    = 1,
       UPATH_RMOVETO   = 2,
       UPATH_LINETO    = 3,
       UPATH_RLINETO   = 4,
       UPATH_CURVETO   = 5,
       UPATH_RCURVETO  = 6,
       UPATH_ARC       = 7,
       UPATH_ARCN      = 8,
       UPATH_ARCT      = 9,
       UPATH_CLOSEPATH = 10,
       UPATH_UCACHE    = 11,
       UPATH_MYMOVETO  = 12,
       UPATH_MYCLOSE   = 13,
       /* Common aliases for path elements */
       MOVETO          = UPATH_MOVETO,
       LINETO          = UPATH_LINETO,
       CURVETO         = UPATH_CURVETO,
       CLOSEPATH       = UPATH_CLOSEPATH,
       MYMOVETO        = UPATH_MYMOVETO,
       MYCLOSE         = UPATH_MYCLOSE,
       TEMPORARYCLOSE  = UPATH_MYCLOSE + 128
} ;

struct LINELIST {
  FPOINT point ;        /* double aligned    */
  uint8 systemalloc ;   /* Allocation type */
  uint8 type ;          /* See enumeration above */
  uint8 order ;         /* Used for corner detection in strokepath */
  uint8 flags ;         /* Stores orientation for clippath and stroked flag (from XPS IsStroked attribute). */
  LINELIST *next ;      /* Next linelist within this subpath */
} ;

/* Static initialiser for static LINELISTs */
/* Takes type, coordinates and next parameters */
#define LINELIST_STATIC(type,x,y,next) {{x,y},PATHTYPE_STATIC,type,0,0,next}

struct PATHLIST {
  uint8  systemalloc ;  /* Allocation type */
  int8   order ;        /* Used in clippath. */
  uint16 shared ;       /* >0 in first PATHLIST if shared between PATHINFOs */
  LINELIST *subpath ;   /* Line segments for this subpath */
  PATHLIST *next ;      /* Next subpath on path */
} ;

/* Static initialiser for static PATHLISTs */
/* Takes subpath and next parameters */
#define PATHLIST_STATIC(line,next) {PATHTYPE_STATIC,0,0,line,next}

/* The maximum number of times a PATHLIST can be shared - limited by the
   type of PATHLIST.shared of course. */
#define MAX_PATH_SHARES 65535

/* Values for bboxtype flag. Only those flags included in BBOX_TYPE_MASK will
   be saved in the path; the others are flags for the get and set bbox
   functions. */
enum { BBOX_NOT_SET =       0x00, /* BBox has not been set */
       BBOX_IGNORE_NONE   = 0x01, /* Do not ignore anything */
       BBOX_IGNORE_LEVEL2 = 0x02, /* Ignore strictly trailing moveto's */
       BBOX_IGNORE_ALL =    0x04, /* Ignore all degenerate subpaths */
       BBOX_SETBBOX =       0x08, /* BBox was set by setbbox */
       BBOX_TYPE_MASK =     0x0f, /* Mask for bbox type */
       BBOX_SAVE =          0x10, /* getbbox can set pathinfo bbox */
       BBOX_LOAD =          0x20, /* getbbox can use pathinfo bbox */
       BBOX_UNION =         0x40  /* getbbox gets bbox union */
} ;

enum {
  PATHINFO_CLEAR_FLAGS          = 0x0,
  PATHINFO_UNSTROKED_SEGMENTS   = 0x1, /* path contains some unstroked line segments (from XPS IsStroked attribute) */
  PATHINFO_XPS                  = 0x2, /* path is from XPS and different rules apply in stroking the path */
  PATHINFO_IGNORE_ZERO_LEN_DASH = 0x4, /* zero-length dashes are handled by drawing a hairline in PS &
                                          PDF.  In XPS and PCL zero-length dashes don't have hairlines. */
  PATHINFO_PCLXL                = 0x8  /* In PCLXL we ignore any length-1 dashes
                                        * where this is the last dash segment generated by
                                        * a dash pattern that ends with a gap
                                        * And we use round line joins
                                        * between *internal* path joins
                                        * inserted as part of path flattening
                                        * even when we are stroking a line with eNoJoin line join style
                                        */
} ;

struct PATHINFO {
  PATHLIST *firstpath ;
  PATHLIST *lastpath ;
  LINELIST *lastline ;
  /* curved is just 1-bit flag; protection and bboxtype use more bits. curved
     will change to be a path type flag: unknown, curved, circle, d-space rect */
  uint8 bboxtype, curved, protection ;
  uint8 flags ; /* PATHINFO_UNSTROKED_SEGMENTS, PATHINFO_XPS */
  sbbox_t bbox ;
  uint32 charpath_id; /* non-zero if this was created a charpath operation */
} ;

/* Static initialiser for static PATHINFOs */
/* Takes firstpath, lastpath and lastline parameters */
#define PATHINFO_STATIC(fp,lp,ll) {fp,lp,ll,FALSE,FALSE,FALSE,0,{0.0,0.0,0.0,0.0},0}

/* Old path accessor macros. These are deprecated. */
#define thePath(val)           ((val).firstpath)

#define MAX_UPATH_REPS  223 /* 255-32, max repetitions for binary upath */

/* Values of the protection flag */
#define PROTECTED_HQXRUN        ((uint8)254)
#define PROTECTED_MRSWA         ((uint8)253)
#define PROTECTED_BLANKET       ((uint8)252)
#define PROTECTED_ATL           ((uint8)251)
#define PROTECTED_MINTYPE       ((uint8)129)
#define PROTECTED_MAXSTRAT      ((uint8)128)
#define PROTECTED_MINSTRAT      ((uint8)1)

/* so we can test it as a boolean */
#define PROTECTED_NONE          ((uint8)FALSE)
/* convert a strategy into a suitable value for a protection */
#define PROTECTION( s )         ((uint8)(s))
/* convert a protection into a suitable value for a strategy */
#define PROSTRATEGY( p )        ((int32)(p))

/** \} */

#endif /* protection for multiple inclusion */

/*
Log stripped */
