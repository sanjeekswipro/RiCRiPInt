/** \file
 * \ingroup coons
 *
 * $HopeName: SWv20!export:tensor.h(EBDSDK_P.1) $
 *
 * Copyright (C) 1998-2007 Global Graphics Software Ltd. All rights reserved.
 * Global Graphics Software Ltd. Confidential Information.
 *
 * \brief
 * Header file for tensor mesh functions.
 */

#ifndef __TENSOR_H__
#define __TENSOR_H__

/** \defgroup coons Tensor and Coons meshes
    \ingroup shfill */
/** \{ */

/* Generic enum for indexed coordinates and values */
enum { TENSOR_UV_INVALID = -1, TENSOR_U = 0, TENSOR_V = 1 } ;

/* pos and spos in the structures below are sorting values; the patches
   generated by a tensor patch are sorted first on their V order, and then on
   their U order. The decomposition order will directly translate to the U/V
   order; each division should have progressively less influence than the
   next level. The pos value is initialised to 1, and progressively shifted
   left and the lowest bit either set or not set depending on the relative
   order of the sub-divisions. The pos and spos values are signed, so when
   this value becomes negative, no more sub-divisions can be done. The values
   are normalised by shifting left until negative before being used as
   sorting values. Storing them as signed integers also allows values to
   be subtracted without overflow. */
#define SPOS_OF_ONE (1 << 31) /* Appropriate for int32 */

/* The patch corner and tensor coord values in these structures are indexed
   by U first and V second. */
typedef struct SHADINGpatch {
  SHADINGvertex *corner[2][2] ;
  int32 spos[2] ;
  int32 decomp_type , is_first_vertex_shared;
  struct SHADINGpatch *children;
} SHADINGpatch ;

#define isIPatchDivided(p) (p->children != NULL)

typedef struct SHADINGtensor {
  SHADINGinfo *sinfo ;
  SHADINGpatch *patch ;
  SHADINGpatch *neighbors[2] ; /* above and left */
  SYSTEMVALUE coord[4][4][2] ;
  int32 pos[2] ;
} SHADINGtensor ;

int32 tensor_mesh(SHADINGinfo *sinfo, SHADINGsource *sdata, int32 type) ;

int32 tensor_draw( SHADINGtensor *tensor ) ;

/* Convert Coons patch coordinates to full Tensor mesh */
void tensor_internal_coords(SHADINGtensor *tensor) ;

/** \} */

#endif /* protecton for multiple inclusion */

/* Log stripped */
