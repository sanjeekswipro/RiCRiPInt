/** \file
 * \ingroup bitblit
 *
 * $HopeName: SWv20!export:bitblth.h(EBDSDK_P.1) $
 *
 * Copyright (C) 1991-2011 Global Graphics Software Ltd. All rights reserved.
 * Global Graphics Software Ltd. Confidential Information.
 *
 * \brief
 * Bit blitting routines.
 */

#ifndef __BITBLTH_H__
#define __BITBLTH_H__ 1

#include "bitbltt.h" /* basic typedefs */

struct render_blit_t ; /* from render.h */
struct NFILLOBJECT ; /* from displayt.h */

/** Copy the contents of one form to another. The forms should be of the same
    size. This routine will handle bitmap or RLE clip forms, but not character
    RLE forms.

    \param fromform The source form.

    \param toform The destination form.
*/
void copyform(const FORM *fromform, FORM *toform);

void invalid_area(struct render_blit_t *rb, FORM *formptr );

/* Area 0 and 1 fill are special, they are never called through the areafills
   dispatch function, and don't need a render info. */
void area0fill(FORM *formptr );
void area1fill(FORM *formptr );

void bitfill0(struct render_blit_t *rb,
              dcoord y , dcoord xs , dcoord xe );
void bitfill1(struct render_blit_t *rb,
              dcoord y , dcoord xs , dcoord xe );

void bitclip0(struct render_blit_t *rb,
              dcoord y , dcoord xs , dcoord xe );
void bitclip1(struct render_blit_t *rb,
              dcoord y , dcoord xs , dcoord xe );

void blkfill0(struct render_blit_t *rb,
              dcoord ys , dcoord ye , dcoord xs , dcoord xe );
void blkfill1(struct render_blit_t *rb,
              dcoord ys , dcoord ye , dcoord xs , dcoord xe );
void blkclip0(struct render_blit_t *rb,
              dcoord ys , dcoord ye , dcoord xs , dcoord xe );
void blkclip1(struct render_blit_t *rb,
              dcoord ys , dcoord ye , dcoord xs , dcoord xe );

void blkfillspan(struct render_blit_t *rb,
                 dcoord ys , dcoord ye , dcoord xs , dcoord xe );
void blkclipspan(struct render_blit_t *rb,
                 dcoord ys , dcoord ye , dcoord xs , dcoord xe );

/* --- Exported Functions --- */
void charblt1(struct render_blit_t *rb,
              FORM *formptr, dcoord x, dcoord y);
void charblt0(struct render_blit_t *rb,
              FORM *formptr, dcoord x, dcoord y);
void charclip1(struct render_blit_t *rb,
               FORM *formptr, dcoord x, dcoord y);
void charclip0(struct render_blit_t *rb,
               FORM *formptr, dcoord x, dcoord y);

/* bitfill1, driven through a span-encoded form. */
void spanclip1(struct render_blit_t *rb,
               dcoord y , dcoord xs , dcoord xe ) ;

/** Call a function for each run of bits in a bitmap line intersecting a
    coordinate range. The black callback function is called once for each
    span or part of a span in the range. The optional white callback function
    is called once for each gap or part of a gap in the range, if present.
    The callback functions are designed to be compatible with
    BITBLT_FUNCTIONs, so a suitable Y coordinate and render info are passed
    directly to the clip iterator.

    \param clipptr A pointer to the bitmap line to filter spans through.

    \param black A \c BITBLT_FUNCTION compatible callback, which will be
    called for every black (marked) span in the spanlist.

    \param white A \c BITBLT_FUNCTION compatible callback, which will be
    called for every white (unmarked) span in the spanlist.

    \param rb A \c render_blit_t pointer which will be passed through to the
    \a black and \a white callback functions.

    \param y The y coordinate which will be passed through to the \a black and
    \a white callback functions.

    \param xs The minimum X coordinate which will be passed in spans to the
    \a black and \a white callback functions.

    \param xe The maximum X coordinate which will be passed in spans to
    the \a black and \a white callback functions.

    \param xoffset The offset of the spans stored in the bitmap line relative
    to the \a xs, \a right xe. If the bitmap was generated by a clipping
    operation, it will have the X separation offset applied to it. This
    offset allows the caller to undo the effect of the offset before passing
    spans on to the blit \a black and \a white functions, which usually take
    the separation offset into effect themselves.
*/
void bitmap_intersecting(/*@notnull@*/ const blit_t *clipptr,
                         /*@notnull@*/ BITBLT_FUNCTION black,
                         /*@null@*/ BITBLT_FUNCTION white,
                         struct render_blit_t *rb,
                         dcoord y, dcoord xs, dcoord xe, dcoord xoffset) ;

void init_mask_span(void) ;
void init_mask_block(void) ;
void init_mask_char(void) ;
void init_mask_1(void) ;

#endif /* protection for multiple inclusion */

/* Log stripped */
